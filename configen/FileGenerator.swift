//
//  FileGenerator.swift
//  configen
//
//  Created by Dónal O'Brien on 11/08/2016.
//  Copyright © 2016 The App Business. All rights reserved.
//

import Foundation

struct FileGenerator {

  let optionsParser: OptionsParser

  var autoGenerationComment: String {
    return """
    // auto-generated by \(optionsParser.appName)\n// to add or remove properties, edit the mapping file: '\(optionsParser.inputHintsFilePath)'.\n// README: https://github.com/theappbusiness/ConfigGenerator/blob/master/README.md\n\n
    """
  }

  func generateHeaderFile(withTemplate template: HeaderTemplate) {

    var headerBodyContent = ""
    for (variableName, type) in optionsParser.hintsDictionary {
      let headerLine = methodDeclarationForVariableName(variableName: variableName, type: type, template: template)
      headerBodyContent.append("\n" + headerLine + ";" + "\n")
    }

    var headerBody = template.headerBody
    headerBody.replace(token: template.bodyToken, withString: headerBodyContent)

    do {
      let headerOutputString = autoGenerationComment + template.headerImportStatements + headerBody
      try headerOutputString.write(toFile: template.outputHeaderFileName, atomically: true, encoding: String.Encoding.utf8)
    } catch {
      fatalError("Failed to write to file at path \(template.outputHeaderFileName)")
    }

  }

  func generateImplementationFile(withTemplate template: ImplementationTemplate) {
    var implementationBodyContent = ""
    for (variableName, type) in optionsParser.hintsDictionary {
      let implementationLine = methodImplementationForVariableName(variableName: variableName, type: type, template: template)
      implementationBodyContent.append("\n" + implementationLine + "\n")
    }

    var implementationBody = template.implementationBody
    implementationBody.replace(token: template.bodyToken, withString: implementationBodyContent)

    do {
      let implementationOutputString = autoGenerationComment + template.implementationImportStatements + implementationBody
      try implementationOutputString.write(toFile: template.outputImplementationFileName, atomically: true, encoding: String.Encoding.utf8)
    } catch {
      fatalError("Failed to write to file at path \(template.outputImplementationFileName)")
    }

  }

  func methodDeclarationForVariableName(variableName: String, type: String, template: HeaderTemplate) -> String {
    var line = ""

    switch type {
    case "Double":
      line = template.doubleDeclaration

    case "Int":
      line = template.integerDeclaration

    case "String":
      line = template.stringDeclaration

    case "Bool":
      line = template.booleanDeclaration

    case "URL":
      line = template.urlDeclaration

    default:
      line = template.customDeclaration
      line.replace(token: template.customTypeToken, withString: type)
    }

    line.replace(token: template.variableNameToken, withString: variableName)

    return line
  }

  func methodImplementationForVariableName(variableName: String, type: String, template: ImplementationTemplate) -> String {

    guard let value = optionsParser.plistDictionary[variableName] else {
      fatalError("No configuration setting for variable name: \(variableName)")
    }

    var line = ""

    switch type {
    case "Double":
      line = template.doubleImplementation

    case "Int":
      line = template.integerImplementation

    case "String":
      line = template.stringImplementation

    case "Bool":
      guard let value = value as? Bool else { fatalError("Not a bool!") }
      let boolString = value ? template.trueString : template.falseString
      line = template.booleanImplementation
      line.replace(token: template.valueToken, withString: boolString)

    case "URL":
      guard let url = URL(string: "\(value)") else { fatalError("Not a URL!") }
      guard url.host != nil else {
        fatalError("Found URL without host: \(url) for setting: \(variableName)")
      }
      line = template.urlImplementation

    default:
      guard value is String else {
        fatalError("Value (\(value)) must be a string in order to be used by custom type \(type)")
      }
      line = template.customImplementation
      line.replace(token: template.customTypeToken, withString: type)
    }

    line.replace(token: template.variableNameToken, withString: variableName)
    line.replace(token: template.valueToken, withString: "\(value)")

    return line
  }

}

extension String {
  mutating func replace(token: String, withString string: String) {
    self = replacingOccurrences(of: token, with: string)
  }

  var trimmed: String {
    return (self as NSString).trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)
  }
}
