//
//  FileGenerator.swift
//  configen
//
//  Created by Dónal O'Brien on 11/08/2016.
//  Copyright © 2016 The App Business. All rights reserved.
//

import Foundation

struct FileGenerator {
  
  let optionsParser: OptionsParser
  
  var autoGenerationComment: String { return "// auto-generated by \(optionsParser.appName)\n// to add or remove properties, edit the mapping file: '\(optionsParser.inputHintsFilePath)'.\n// README: https://github.com/theappbusiness/ConfigGenerator/blob/master/README.md\n\n" }
  
  func generateHeaderFile(withTemplate template: HeaderTemplate) {
    
    var headerBodyContent = ""
    for (variableName, type) in optionsParser.hintsDictionary {
      let headerLine = methodDeclarationForVariableName(variableName: variableName, type: type, template: template)
      headerBodyContent.append("\n" + headerLine + ";" + "\n")
    }
    
    var headerBody = template.headerBody
    headerBody.replace(token: template.bodyToken, withString: headerBodyContent)
    
    do {
      let headerOutputString = autoGenerationComment + template.headerImportStatements + headerBody
      try headerOutputString.write(toFile: template.outputHeaderFileName, atomically: true, encoding: String.Encoding.utf8)
    }
    catch {
      fatalError("Failed to write to file at path \(template.outputHeaderFileName)")
    }

  }
  
  
  func generateImplementationFile(withTemplate template: ImplementationTemplate) {
    var implementationBodyContent = ""
    for (variableName, type) in optionsParser.hintsDictionary {
      let implementationLine = methodImplementationForVariableName(variableName: variableName, type: type, template: template)
      implementationBodyContent.append("\n" + implementationLine + "\n")
    }
    
    var implementationBody = template.implementationBody
    implementationBody.replace(token: template.bodyToken, withString: implementationBodyContent)
    
    do {
      let implementationOutputString = autoGenerationComment + template.implementationImportStatements + implementationBody
      try implementationOutputString.write(toFile: template.outputImplementationFileName, atomically: true, encoding: String.Encoding.utf8)
    }
    catch {
      fatalError("Failed to write to file at path \(template.outputImplementationFileName)")
    }
    
  }
  
  
  func methodDeclarationForVariableName(variableName: String, type: String, template: HeaderTemplate) -> String {
    var line = ""
    let finalType = optionsParser.isObjC ? type.replacingOccurrences(of: "?", with: "") : type
    switch (finalType) {
    case ("Double"):
      line = template.doubleDeclaration
      
    case ("Int"):
      line = template.integerDeclaration
      
    case ("String"):
      line = template.stringDeclaration
      
    case ("Bool"):
      line = template.booleanDeclaration
      
    case ("URL"):
      line = template.urlDeclaration
      
    default:
      line = template.customDeclaration
      line.replace(token: template.customTypeToken, withString: finalType)
    }
    
    line.replace(token: template.variableNameToken, withString: variableName)
    
    return line
  }
  
  
  func methodImplementationForVariableName(variableName: String, type: String, template: ImplementationTemplate) -> String {
    
    guard let value = optionsParser.plistDictionary[variableName] else {
      fatalError("No configuration setting for variable name: \(variableName)")
    }
    
    var line = ""
    var finalType = type
    var isObjcOptional = false
    
    if optionsParser.isObjC && type.contains("?") {
      finalType = type.replacingOccurrences(of: "?", with: "")
      isObjcOptional = value as? String == "nil" ? true : false
    }
    
    switch (finalType) {
    case ("Double"):
      if isObjcOptional && template is ObjectiveCTemplate{
        let objcTemplate = template as! ObjectiveCTemplate
        line = objcTemplate .optionalImplementation
        line.replace(token: objcTemplate.declarationToken, withString: objcTemplate.doubleDeclaration)
      }else {
        line = template.doubleImplementation
      }
      
    case ("Int"):
      if isObjcOptional && template is ObjectiveCTemplate{
        let objcTemplate = template as! ObjectiveCTemplate
        line = objcTemplate .optionalImplementation
        line.replace(token: objcTemplate.declarationToken, withString: objcTemplate.integerDeclaration)
      }else {
        line = template.integerImplementation
      }
      
    case ("String"):
      if isObjcOptional && template is ObjectiveCTemplate{
        let objcTemplate = template as! ObjectiveCTemplate
        line = objcTemplate .optionalImplementation
        line.replace(token: objcTemplate.declarationToken, withString: objcTemplate.stringDeclaration)
      }else {
        line = template.stringImplementation
      }
      
    case ("Bool"):
      if isObjcOptional && template is ObjectiveCTemplate{
        let objcTemplate = template as! ObjectiveCTemplate
        line = objcTemplate .optionalImplementation
        line.replace(token: objcTemplate.declarationToken, withString: objcTemplate.booleanDeclaration)
      }else {
        let boolString = value as! Bool ? template.trueString : template.falseString
        line = template.booleanImplementation
        line.replace(token: template.valueToken, withString: boolString)
      }
      
    case ("URL"):
      if isObjcOptional && template is ObjectiveCTemplate{
        let objcTemplate = template as! ObjectiveCTemplate
        line = objcTemplate .optionalImplementation
        line.replace(token: objcTemplate.declarationToken, withString: objcTemplate.urlDeclaration)
      }else {
        let url = URL(string: "\(value)")!
        guard url.host != nil else {
          fatalError("Found URL without host: \(url) for setting: \(variableName)")
        }
        line = template.urlImplementation
      }
      
    default:
      guard value is String else {
        fatalError("Value (\(value)) must be a string in order to be used by custom type \(finalType)")
      }
      line = template.customImplementation
      line.replace(token: template.customTypeToken, withString: finalType)
    }
    
    line.replace(token: template.variableNameToken, withString: variableName)
    line.replace(token: template.valueToken, withString: "\(value)")
    
    return line
  }
  
}

extension String {
  mutating func replace(token: String, withString string: String) {
    self = replacingOccurrences(of: token, with: string)
  }
  
  var trimmed: String {
    return (self as NSString).trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)
  }
}
